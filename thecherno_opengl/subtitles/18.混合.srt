1
00:00:00,133 --> 00:00:03,633
嘿，你们好，我是TheCherno，欢迎回到我的OpenGL系列教程
hey, what's up guys, my name is TheCherno, welcome back to my OpenGL series

2
00:00:03,633 --> 00:00:06,200
那么我们上次说了纹理
so last time we talked about textures

3
00:00:06,200 --> 00:00:11,700
具体来说，我们把TheChernoLogo图片渲染到屏幕上的一个四边形上
and specifically we got TheChernoLogo rendering onto a quad essentially on our screen

4
00:00:11,700 --> 00:00:14,366
所以如果你们还没看过那期视频，一定要去点开看看
so if you haven't seen that video, definitely click up there and watch it

5
00:00:14,400 --> 00:00:15,766
它对于今天还是比较重要的
it's gonna be important for today

6
00:00:15,925 --> 00:00:18,366
因为在上一期的最后
because at the very end of that episode last time

7
00:00:18,866 --> 00:00:23,033
我们在渲染纹理时遇到了一些问题
we had a bit of an issue with how our texture was actually rendering

8
00:00:23,233 --> 00:00:25,433
而不是留给你们一个悬念
and then instead of leaving you guys with a cliff hanger

9
00:00:25,433 --> 00:00:27,500
我真的很想这么做
which I was very attempted to actually do

10
00:00:27,633 --> 00:00:30,633
但是没有，所以我还是比较好的，对吧
but didn't, so yeah it was nice for me, right

11
00:00:31,333 --> 00:00:33,300
我们实际上讲了一点混合
we actually talked a little bit about blending

12
00:00:33,300 --> 00:00:37,233
特别地，我们启用了一个叫做混合的东西，我们设置了一个混合函数
and specifically we enabled something called blending, and we set a blend function

13
00:00:37,366 --> 00:00:39,500
这就随机得到了我们的纹理
and that got our texture and randomly

14
00:00:39,500 --> 00:00:43,300
那么如果我们看一下代码，特别是我们加了这两行代码
so if we take a look at the code, specifically we added these two lines

15
00:00:43,300 --> 00:00:45,500
如果我把它们注释掉并运行我的程序
if I comment them out and run my program

16
00:00:45,666 --> 00:00:47,666
我们会得到一个奇怪的纹理
we will get a weird looking texture

17
00:00:47,666 --> 00:00:50,333
所以这就是我们的纹理，看起来很奇怪
so there's our texture, looks pretty weird

18
00:00:50,666 --> 00:00:53,866
如果我回到我的代码，我只启用第一行
if I go back to my code, and I just enable this first line

19
00:00:53,866 --> 00:00:56,333
这个是首先启用混合的
which is just enabling blending in the first place

20
00:00:56,700 --> 00:00:59,166
看起来完全一样
it looks well exactly the same

21
00:00:59,766 --> 00:01:01,933
如果我启用这两行代码
and if I enable both of these lines

22
00:01:01,933 --> 00:01:04,200
然后我们得到一些看起来更正常的东西
then we get something that looks a little bit more normal

23
00:01:04,200 --> 00:01:06,266
或者是我们所期望的
or something that we would expect which is well

24
00:01:06,300 --> 00:01:08,500
这与源图像非常相似
this which is really resembling the source image

25
00:01:08,500 --> 00:01:11,892
在这个例子中，我们实际上用它作为纹理
that we actually used as a texture in this case 

26
00:01:11,892 --> 00:01:14,733
所以我很快地跳过了这两行，我并没有真正地解释它们
so I quickly out of those two lines, and I didn't really explain them

27
00:01:14,733 --> 00:01:16,266
因为我想把它们留到这个视频中
because I wanted to save them for this video

28
00:01:16,266 --> 00:01:19,250
这将解释什么是混合
which is going to be explaining what blending actually is

29
00:01:19,250 --> 00:01:22,333
今天我甚至做了一些不同的事情
and I've even done something a little bit different today

30
00:01:22,666 --> 00:01:24,666
我希望你们在接下来的视频中会喜欢
which I hope you'll enjoy in the rest of this video

31
00:01:24,666 --> 00:01:26,000
好了，那么混合，它是什么
okay, so blending, what is it

32
00:01:26,000 --> 00:01:28,666
为什么我们的纹理渲染在一开始就不正确
and why was our texture rendering incorrectly in the first place

33
00:01:28,866 --> 00:01:31,000
那么混合很简单的
so blending is pretty simple

34
00:01:31,000 --> 00:01:35,466
本质上，当我们渲染一些部分或完全透明的东西时
it's essentially, when we render something that is partially or fully transparent

35
00:01:35,766 --> 00:01:37,900
我们该怎么做，对吧
how do we do that, right

36
00:01:38,033 --> 00:01:40,633
如果我有一些透明的概念
if I have something with a concept of transparency

37
00:01:40,633 --> 00:01:43,933
首先，你们必须意识到，对你们和我来说
first of all, you have to realize that, to you and me

38
00:01:43,933 --> 00:01:45,200
当我们谈到透明度的时候
when we talk about transparency

39
00:01:45,200 --> 00:01:46,850
我们会想到PS
and we think of something maybe like in photoshop

40
00:01:46,850 --> 00:01:49,400
当你们降低一个图层的不透明度
when you turn down the opacity of a layer

41
00:01:49,433 --> 00:01:51,800
或者你们有像玻璃这样的东西，你们要渲染
or you have something like glass that you're rendering

42
00:01:51,800 --> 00:01:52,966
就像这样
that is like kind of there

43
00:01:52,966 --> 00:01:55,800
但实际上并不是大部分都是由反射组成的
but not really mostly made up of reflections perhaps

44
00:01:55,966 --> 00:01:59,733
或者它是有色玻璃，所以它倾向可视化某种颜色
or maybe it's colored glass, so it kind of tends to view a certain color

45
00:02:00,566 --> 00:02:02,500
这对我们的大脑来说是有意义的
it all kind of makes sense to us in our brain

46
00:02:02,500 --> 00:02:05,300
我们说，是的，这就是我想要的，对吧
and we're like, yeah, that's what I expect to happen, right

47
00:02:05,300 --> 00:02:07,633
但当我们谈到图形编程时
but when we're talking about graphics programming

48
00:02:08,266 --> 00:02:11,300
你们必须告诉电脑你真正想让它做什么
you have to tell the computer what you actually want it to do

49
00:02:11,300 --> 00:02:14,966
因为它不知道你们想做什么
because it doesn't know what you want to do

50
00:02:14,966 --> 00:02:18,066
默认情况下，OpenGL不执行任何混合
and by default, OpenGL doesn't perform any kind of blending

51
00:02:18,066 --> 00:02:19,966
它只需要你们渲染的东西
it just kind of takes whatever you're rendering

52
00:02:20,233 --> 00:02:24,100
然后把它渲染成不透明的东西
and just renders it as if it was just something opaque

53
00:02:24,100 --> 00:02:27,000
或者一些正常的东西，或者和它很正常的东西，对吧
or something normal, or something well normal to it, right

54
00:02:27,333 --> 00:02:31,275
所以只要记住，当我们讨论这些概念
so just keep in mind that, when we talk about all these kind of concepts 

55
00:02:31,275 --> 00:02:34,566
你们所期望的并不一定是计算机所期望的
what you expect is not necessarily what the computer expects

56
00:02:34,700 --> 00:02:36,700
你们可能有不同的定义
and you may have different definitions

57
00:02:36,700 --> 00:02:38,966
所以这就是为什么我们要回到基础上来
so that's why we're going to go back to basics

58
00:02:38,966 --> 00:02:41,469
我甚至还准备了一个ppt演示
and I've even prepared a bit of a powerpoint presentation

59
00:02:41,469 --> 00:02:43,769
我觉得我以前从没做过这种事
which is something that I don't think I've ever done before

60
00:02:44,233 --> 00:02:46,000
所以请告诉我你们对这种风格的看法
so let me know what you think of this kind of style

61
00:02:46,000 --> 00:02:48,500
因为我真的很想用一些图表来解释
because I really wanted to kind of have some diagrams to explain

62
00:02:48,733 --> 00:02:51,333
什么是混合，那么什么是混合
what blending actually was, so what is blending

63
00:02:51,400 --> 00:02:54,766
所以我想我们有了这个我们渲染过的红色方块
so I suppose that we had this red square that we rendered and

64
00:02:54,766 --> 00:02:58,533
在它上面，我们以某种形式渲染了一个蓝色的正方形
on top of it in some form, we rendered a blue square

65
00:02:58,733 --> 00:03:03,233
现在这个例子中的蓝色方块是半透明的，对吧
now this blue square in this example is going to be partially translucent, right

66
00:03:03,233 --> 00:03:05,466
它不会是一个完全不透明的蓝色方块
it's not going to be a fully opaque blue square

67
00:03:05,466 --> 00:03:07,933
因为如果我们把它渲染在红色方块的上面
because if we just rendered that on top of our red square

68
00:03:08,266 --> 00:03:11,366
我们根本看不到红色方块，我们会得到一个蓝色的正方形
well we wouldn't see the red square at all, we would just get a blue square

69
00:03:11,400 --> 00:03:12,766
但是在这个例子中
however in this example

70
00:03:12,900 --> 00:03:15,433
假设这个蓝色的正方形真的像一片蓝色的玻璃
pretend that this blue square is really like a sheet of blue glass

71
00:03:15,433 --> 00:03:16,400
或者类似的东西
or something like that

72
00:03:16,766 --> 00:03:19,533
我们期望得到这两种颜色的组合
we would expect to get a combination of those two colors

73
00:03:19,533 --> 00:03:21,450
我们认为是紫色的，对吧
which we would perceive as purple, right

74
00:03:21,450 --> 00:03:24,825
如果我们在现实生活中拿红玻璃和蓝玻璃
if we literally in real life took red glass and blue glass

75
00:03:24,825 --> 00:03:26,566
然后把它们像这样叠在一起
and then put them on top of each other like this

76
00:03:26,800 --> 00:03:30,400
我们会看到穿过的光实际上是紫色的
we would see light coming through would actually be tented purple

77
00:03:30,400 --> 00:03:32,700
那就是我们用眼睛所看到的
and that's what we would perceive with our eyes

78
00:03:32,700 --> 00:03:35,433
更具体地说，如果我们看看这是什么样子
more specifically, if we actually look at what this looks like

79
00:03:35,433 --> 00:03:38,166
如果我们渲染一个红色的正方形，然后在它上面渲染一个蓝色的正方形
if we rendered a red square, and then a blue square on top of it

80
00:03:38,166 --> 00:03:40,900
但蓝色正方形实际上是半透明的
but the blue square was in fact translucent

81
00:03:41,100 --> 00:03:42,566
我们会看到这样的东西
we would see something like this

82
00:03:42,566 --> 00:03:44,866
这就是两种颜色的组合
which is the combination of those two colors

83
00:03:45,409 --> 00:03:46,850
所以混合只是决定了
so blending just determines

84
00:03:46,850 --> 00:03:51,933
我们如何将输出颜色与目标缓冲区中已经存在的颜色结合起来
how we actually combine our output color with what is already in our target buffer

85
00:03:51,933 --> 00:03:53,300
那么什么是我们的输出颜色
so what is our output color

86
00:03:53,533 --> 00:03:56,766
那是我们从片段着色器中输出的颜色，也被称为source(来源)
that's the color that we output from our fragmente shader, and known as source

87
00:03:56,766 --> 00:03:58,933
所以在这个例子中，我们输出的是蓝色
so in this case, we're outputting a blue color

88
00:03:59,400 --> 00:04:01,533
因为我们渲染的是一个蓝色的正方形
because we're rendering a blue square

89
00:04:01,566 --> 00:04:06,633
然后目标缓冲区就是我们画蓝色方块的地方
and then the target buffer is where we're actually drawing that blue square onto

90
00:04:06,633 --> 00:04:09,633
那么，在这个例子中，我们把它画到一个已经存在的缓冲区上
so in this case, we're drawing it onto an already existing buffer

91
00:04:09,733 --> 00:04:12,733
也就是我们的destination(目标)，在这个例子中包含一个红色方块
known as our destination, which in this case contains a red square

92
00:04:12,733 --> 00:04:16,666
那么我们如何控制这两种颜色混合的方式
so how do we actually control the way that these two colors get blended

93
00:04:16,933 --> 00:04:20,466
我们在OpenGL中有三种不同的方法，它们做的事情非常不同
well we really have three different ways in OpenGL, and they do very different things

94
00:04:20,466 --> 00:04:24,033
那么首先，启用和禁用，就是glEnable和glDisable，参数GL_BLEND
so first of all, enable and disable, glEnable and disable blend

95
00:04:24,200 --> 00:04:25,900
首先启用和禁用混合
enable and disable blending in the first place

96
00:04:25,900 --> 00:04:28,900
如果你们没有启用混合，默认情况下是不会启用的
if you don't have blending enabled, which you won't by default

97
00:04:29,000 --> 00:04:30,533
那么什么都不会发生
then nothing is going to happen

98
00:04:30,600 --> 00:04:32,800
它完全不会混合
your it's just not gonna blend at all

99
00:04:32,800 --> 00:04:34,433
所以你们要做的第一件事
so the first thing you need to do

100
00:04:34,666 --> 00:04:36,766
这也是我们在代码中做的第一件事
which is also the first thing that we did in our code

101
00:04:36,966 --> 00:04:38,800
就是glEnable(GL_BLEND)
was glEnable GL_BLEND

102
00:04:38,933 --> 00:04:41,400
其次，我们有一个叫glBlendFunc的函数
secondly, we have something called glBlendFunc

103
00:04:41,533 --> 00:04:43,600
它接收一个src和dest参数
which takes a src and a dest

104
00:04:43,600 --> 00:04:45,666
我们调用的这个函数基本上指定了
and this function that we call basically specifies

105
00:04:45,666 --> 00:04:48,400
我们如何将这两种颜色混合在一起
how we actually blend the two colors together

106
00:04:48,400 --> 00:04:52,233
那么src就是src的RGBA因子的计算方式
so the src is how the src RGBA factor is computed

107
00:04:52,375 --> 00:04:53,800
默认为GL_ONE
by default, this is GL_ONE 

108
00:04:53,800 --> 00:04:58,133
dest就是计算dest的RGBA因子的方式，默认值是GL_ZERO
dest is how the dest RGBA factor is computed, by default, this is zero

109
00:04:58,233 --> 00:05:01,500
所以这就清楚多了
so this is going to be all a lot clearer

110
00:05:01,533 --> 00:05:04,133
我马上就会深入讲解这些例子
when I actually dive into examples in a minute

111
00:05:04,300 --> 00:05:07,233
但当我谈到src的RGBA因子时
but when I talk about the src RGBA factor essentially

112
00:05:07,300 --> 00:05:10,200
这个混合函数决定了我们要做什么
what this blend function determines is what we do

113
00:05:10,200 --> 00:05:11,933
当我们执行混合等式时
when we perform our blending equation is

114
00:05:11,933 --> 00:05:17,025
我们取src和dest的RGBA的每个颜色通道
we take each color channel of the src RGBA and the dest RGBA

115
00:05:17,025 --> 00:05:19,133
不一定是RGBA，也可以是RGB
doesn't have to be RGBA, can just be RGB

116
00:05:19,133 --> 00:05:20,866
或者你们使用的任何颜色格式
or whatever color format you are using

117
00:05:20,933 --> 00:05:24,100
但是每一个颜色通道，我们都取实际值
but every color channel, we take that actual value

118
00:05:24,233 --> 00:05:26,000
然后用它乘以某个数
and we multiply it with something

119
00:05:26,250 --> 00:05:30,825
然后乘以的这个东西就是我们指定的这个RGBA因子
and this something that we multiply it with is this RGBA factor that we specify

120
00:05:31,166 --> 00:05:34,166
所以当我们看到默认是GL_ONE
so when we see that the default is GL_ONE

121
00:05:34,366 --> 00:05:38,300
那意味着我们实际上取src的RGBA所有通道或单独取
that means we literally take our src RGBA channels or separately

122
00:05:38,433 --> 00:05:42,100
然后乘以1，任何数乘以1
and we multiply them with 1, now anything multiplied with 1

123
00:05:42,100 --> 00:05:44,100
也就是x乘以1等于x，对吧
x multiplied by 1 is going to be x, right

124
00:05:44,100 --> 00:05:47,550
所以换句话说，无论src是什么，它都不会改变
so in other words, whatever the src is, that does not change

125
00:05:47,900 --> 00:05:51,600
至于dest，但是我们知道默认情况下它被设为0
the dest, however we know that we by default it's set to zero

126
00:05:51,800 --> 00:05:54,000
任何数乘以0都是0
and anything multiplied with zero is zero

127
00:05:54,233 --> 00:05:55,866
所以这基本上是在说
so what this is basically saying

128
00:05:55,866 --> 00:06:01,800
这个默认的glGenBlendFunc会丢掉dest，用src覆盖它，对吧
this default glGenBlendFunc is throw away the dest, and just override it with the src, right

129
00:06:01,800 --> 00:06:05,722
因为src中的所有东西都乘以1，这意味着它不会改变
because everything in the src gets multiplied with one, which means it doesn't change

130
00:06:06,000 --> 00:06:09,466
dest中的所有东西都乘以0
and everything in the dest gets multiplied with zero

131
00:06:09,666 --> 00:06:12,700
这意味着它没了，对吧，变成了零
which means that it just gets nuked, right, it becomes zero

132
00:06:13,566 --> 00:06:15,200
所以我们有两个独立的东西，对吧
so we have those two separate things, right

133
00:06:15,200 --> 00:06:18,566
src是不变的，dest被设置为零
the src is just unchange, and the dest has been set to zero

134
00:06:18,600 --> 00:06:21,833
现在我们需要对这两个分量做点什么
and now we need to do something with these two components that we have

135
00:06:22,133 --> 00:06:23,766
这就来到了第三步
and that's where this third thing comes in

136
00:06:23,933 --> 00:06:25,866
这就是我们的混合等式(glBlendEquation)
which is called our blending equation

137
00:06:26,133 --> 00:06:28,100
所以mode基本上是指定
so the mode basically just specifies

138
00:06:28,100 --> 00:06:33,550
作为这个函数文本指定的一个参数，我们如何组合src和dest颜色
as the one parameter that this function texts specifies, how we combine the src and dest colors 

139
00:06:33,550 --> 00:06:34,933
但默认是增加(GL_FUNC_ADD)
but default it's add

140
00:06:35,033 --> 00:06:36,500
那么我们有我说过的这两种颜色
so we had those two colors that I said

141
00:06:36,500 --> 00:06:39,733
我们有了src和dest，我们需要对这两个分量做些什么
we had the src and the dest, we need to do something with those two components

142
00:06:39,733 --> 00:06:42,233
我们把它们加起来，增加的意思就是加
we add them together by add it just means plus

143
00:06:42,466 --> 00:06:48,050
对吧，你们取src的任何颜色也就是src的颜色乘以1
right, so you take whatever the src color is which was the src color multiplied with 1

144
00:06:48,050 --> 00:06:49,200
所以也就是src颜色
so just the src color

145
00:06:49,400 --> 00:06:53,100
然后再加上，dest的颜色乘以0，也就是0
and then you add to it, the dest color multiplied by zero which is zero

146
00:06:53,100 --> 00:06:56,933
所以我们就取src，加上0等于src
so we take src, and we add zero to it which equals src

147
00:06:57,033 --> 00:07:00,233
所以在这个例子中，默认情况下，我们会得到一些东西
so in this example by default, we get something

148
00:07:00,233 --> 00:07:03,133
这本质上是1加0，也就是1
this is essentially one plus zero which is just one

149
00:07:03,300 --> 00:07:05,666
对吧，这意味着使用src值
right, which this means use the src value

150
00:07:05,833 --> 00:07:09,766
这并不意味着仅是src的alpha值，我指的是所有的颜色通道
now this does not mean the src alpha value, I literally mean all of the color channels

151
00:07:09,766 --> 00:07:14,133
不管src是什么，就用那个src颜色覆盖dest
just take whatever the src is, and override the dest with that src color

152
00:07:14,433 --> 00:07:16,033
那是在OpenGL中发生的
that is what happens in OpenGL

153
00:07:16,033 --> 00:07:19,000
默认情况下，如果你们不设置混合函数
by default, if you don't set a blend function

154
00:07:19,266 --> 00:07:22,366
然而，我们所做的是使用一些东西
however what we did is we used something

155
00:07:22,566 --> 00:07:24,533
实际上，我们专门设置了一个混合函数
we actually set a blend function as specifically

156
00:07:24,533 --> 00:07:30,166
使用的src是GL_SRC_ALPHA, dest是GL_ONE_MINUS_SRC_ALPHA
we used the src being GL_SRC_ALPHA, and dest being GL_ONE_MINUS_SRC_ALPHA

157
00:07:30,166 --> 00:07:31,600
这个导致了那个结果
which is what got us that result

158
00:07:31,600 --> 00:07:33,566
这和我们预期的很像
that looked like something that we would expect

159
00:07:33,733 --> 00:07:35,133
那么举个简单的例子
so to show a simple example

160
00:07:35,133 --> 00:07:38,866
使用我们在这里设置的src和dest函数值
using these src and dest function values that we actually set here

161
00:07:39,133 --> 00:07:42,433
如果我们从纹理中输入的像素是完全透明的，对吧
if the pixel that we're entering from our texture is completely transparent, right

162
00:07:42,433 --> 00:07:46,366
所以我的意思是alpha值被设为0，它是完全透明的
so what I mean by that is the alpha is set to 0, it's completely transparent

163
00:07:46,366 --> 00:07:50,875
src alpha= 0，dest = 1 - src alpha(0)
our src alpha is 0, our dest is 1 minus src alpha

164
00:07:50,875 --> 00:07:54,300
所以你们可以看到这里，我们把src设置为GL_SRC_ALPHA
so you can see over here, we've set our src to be GL_SRC_ALPHA

165
00:07:54,300 --> 00:07:57,766
这意味着不管使用这些src的alpha值是什么
which means use whatever these src alpha value is

166
00:07:58,100 --> 00:08:00,000
因为它是透明的，它都是0
since it's transparent, is 0

167
00:08:00,233 --> 00:08:03,500
dest要求减去src的alpha
the dest says take the minus of that src alpha

168
00:08:03,666 --> 00:08:05,800
那么我们看一下src是0
so we look at the src alpha which is 0

169
00:08:05,933 --> 00:08:08,600
我们用1减去src的alpha
and we do 1 minus the src alpha

170
00:08:08,600 --> 00:08:13,733
也就是说，1 - 0 =1，因为src是0，那么我们有这两个值
so in other words, 1 minus 0, since our src alpha is 0, equals 1, so we have those two values

171
00:08:13,733 --> 00:08:14,866
现在我们该怎么处理它们
and now what do we do with them

172
00:08:15,100 --> 00:08:17,466
如果我们看一下这后面的等式
well if we look at the actual equation behind this

173
00:08:17,766 --> 00:08:21,525
它实际上只是指使用目标颜色，该颜色已经在缓冲区中
it is actually just means use the destination color, the color is already in the buffer

174
00:08:21,525 --> 00:08:25,866
因为alpha通道是0表示它是透明的，也就是说我们看不到它
because alpha 0 means it's transparent, which means we don't see it

175
00:08:26,066 --> 00:08:28,133
所以我们根本不应该写一个像素
so we shouldn't really be writing a pixel at all

176
00:08:28,133 --> 00:08:32,600
只需使用目标缓冲区中像素后面的任何值
just use whatever values behind that pixel in that destination buffer

177
00:08:32,775 --> 00:08:36,366
我们看看这后面的映射，你可以看到每个通道
we actually look at the maps behind this, you can see that for each channel

178
00:08:36,366 --> 00:08:39,200
让我们假设我们有一个RGBA纹理和RGBA缓冲
let's just pretend we have an RGBA texture and RGBA buffer

179
00:08:39,200 --> 00:08:43,866
我们取Rsrc，乘以src的alpha，也就是0
we take the src red channel, we multiplied by the src alpha, which is 0

180
00:08:44,000 --> 00:08:45,200
然后我们再加上
and then we add to it

181
00:08:45,200 --> 00:08:48,333
Rdest*(1-0)
the dest red channel multiplied by the minus of that

182
00:08:48,500 --> 00:08:50,433
所以在这个例子中乘以1
so multiplied by 1 in this case

183
00:08:50,433 --> 00:08:55,100
当然，0加上dest值，就得到了dest值
and of course, 0 plus whatever the dest value is, gives us the dest value

184
00:08:55,100 --> 00:08:57,333
我们对每一个颜色通道都这样做
and we do that for every single color channel

185
00:08:57,366 --> 00:08:59,333
所以你们可以看到这个掩码是可行的
so you can see that this mask kind of works out

186
00:08:59,666 --> 00:09:02,633
这样我们就不用任何src颜色了
so that we just don't use any of the src color at all

187
00:09:02,633 --> 00:09:06,433
我们只在实际的缓冲区中保留dest颜色
we just keep the dest color in the actual buffer

188
00:09:06,433 --> 00:09:07,933
我们根本不会影响缓冲区
we don't affect the buffer at all

189
00:09:07,933 --> 00:09:09,833
让我们看一个稍微复杂一点的例子
let's look at a slightly more complicated example

190
00:09:09,833 --> 00:09:10,933
因为那个很简单
because that was really simple

191
00:09:11,266 --> 00:09:13,866
那么假设我们的像素是部分透明的
so pretend that our pixel is partially transparent here

192
00:09:13,866 --> 00:09:16,766
让我们看看我们有这种白色方块
let's just see that we've got this kind of white square

193
00:09:16,966 --> 00:09:18,566
它是半透明的，对吧
that is translucent, right

194
00:09:18,566 --> 00:09:22,400
它的RGB是111，但alpha是0.5
it's got an RGB of 1 1 1, but the alpha is 0.5

195
00:09:22,400 --> 00:09:24,233
那么这里，我们有一个白色方块
so here it is, we've got a white square

196
00:09:24,533 --> 00:09:25,900
它是白色的，但却是半透明的
it's white, but it's translucent

197
00:09:25,900 --> 00:09:29,600
然后在我们的目标缓冲区中，我们有这种类型的目标缓冲区
and then in our destination buffer, we've just got this kind of destination buffer

198
00:09:29,600 --> 00:09:34,300
我们已经把它清除成洋红色了，也就是(1, 0, 1)，把alpha也保存为1
which we've just cleared to magenta, so 1 0 1, and we'll save the alpha as one as well

199
00:09:34,300 --> 00:09:35,566
就这儿，好了
here it is, okay

200
00:09:35,700 --> 00:09:39,866
所以使用我们当前的混合设置src的alpha，以及1减去src的alpha
so using our current bleneing settings of src alpha, and 1 minus src alpha

201
00:09:40,150 --> 00:09:44,200
我们来看看这块，红色通道是1，对吧
let's take a look at the mass, so the red channel is 1, right

202
00:09:44,200 --> 00:09:47,533
因为src的红色通道在这里是1，这是我们的白色方块
because the src red channel is 1 over here, it's our white square

203
00:09:47,733 --> 00:09:50,733
我们用这个乘以src的alpha，也就是0.5
we multiply that with these src alpha which is 0.5

204
00:09:51,166 --> 00:09:54,466
然后我们加上dest红色通道，也就是1
and then to that we add the dest red channel which is 1

205
00:09:54,700 --> 00:09:57,466
乘以1减去src的alpha
multiplied by the minus of that src alpha 1

206
00:09:57,466 --> 00:09:59,366
src的alpha是0.5
src alpha which is 0.5

207
00:09:59,766 --> 00:10:03,400
结果是0.5，再加上0.5就是1
and then that works out to be 0.5, plus 0.5 wishes just 1

208
00:10:03,466 --> 00:10:05,100
所以换句话说，我们在渲染1
so in other words, we're rendering 1

209
00:10:05,300 --> 00:10:07,100
对于很多通道来说都是这样的
now this is going to be the case for a lot of these channels

210
00:10:07,100 --> 00:10:07,700
因为你们可以看到
because you can see that 

211
00:10:07,700 --> 00:10:10,600
我们在每个地方都渲染一个，而不是0.7之类的
we're literally rendering ones everywhere not like 0.7 or something

212
00:10:10,966 --> 00:10:15,800
我们确实处于非本地颜色范围内的粉红色
we're literally at the kind of pink of our non here color range 

213
00:10:16,100 --> 00:10:19,500
绿色通道也有点像这样
so the green channel is also going to be a little bit like this

214
00:10:19,500 --> 00:10:23,100
但是你们可以看到目标绿色通道是0
but you can see that our green channel for our destination is just 0

215
00:10:23,300 --> 00:10:26,333
但是，由于我们的源的绿色通道是1
however since the green channel for our src is 1

216
00:10:26,333 --> 00:10:31,108
我们把它们混合在一起，让它变成一半，结果是0.5
we basically blend that together and made it halfway, and it gives us 0.5

217
00:10:31,400 --> 00:10:34,433
蓝色通道是相同的，alpha通道稍微改变了一点
blue channel is going to be identical, alpha channel changes a little bit

218
00:10:34,433 --> 00:10:38,800
因为0.5和它的一半相加，得到0.75
because we're combining 0.5 and one halfway between that we get 0.75

219
00:10:39,197 --> 00:10:43,566
如果我们要把这个白色方块渲染到这个洋红色矩形的上面
so if we were to render this white square on top of this magenta rectangle

220
00:10:43,766 --> 00:10:45,933
我们会得到看起来像那样的结果
we would get something that looks like that

221
00:10:45,933 --> 00:10:48,400
如果我取这些颜色值，然后渲染它们
if I just take these color values and I render them

222
00:10:48,400 --> 00:10:50,700
这就是我得到的，这就是你们所期望的
that's what I get, and that's kind of what you would expect

223
00:10:50,933 --> 00:10:53,466
如果你们有一个白色的方块，像白色的玻璃之类的东西
if you had a white square, like a white shit of glass or something

224
00:10:53,466 --> 00:10:57,133
我不知道，就像这样，这是部分透明的，好了
I don't know, that was partially transparent, like this, okay

225
00:10:57,133 --> 00:10:59,666
所以这就是混合的原理，如果你们有任何问题
so that's how blending works, if you have any questions

226
00:10:59,700 --> 00:11:00,966
请在下面的评论区留言
leave them in the comments below

227
00:11:01,133 --> 00:11:02,300
其实很简单
it is actually quite simple

228
00:11:02,300 --> 00:11:03,866
一旦你们明白它是如何工作的
once you understand how it works

229
00:11:04,000 --> 00:11:06,733
就可以做几个我在家里做过的例子
do a few of these examples that I've done at home

230
00:11:06,733 --> 00:11:09,933
尝试一些不同的函数，尝试一些不同的等式
try some different functions, try some different equations

231
00:11:09,933 --> 00:11:12,366
把它写在纸上，看看你们会得到什么
just do it on paper and see what you get

232
00:11:12,633 --> 00:11:14,166
学习这些东西真的很重要
learning these things is really important

233
00:11:14,233 --> 00:11:15,800
因为使用混合是有意义的
because using blending is something

234
00:11:15,800 --> 00:11:20,200
你们会在一般的图形编程中使用一段时间
that you'll be using for a while in graphics programming in general

235
00:11:20,300 --> 00:11:22,066
我知道最困难的事情是总是像
and I know that the hardest thing is always being like

236
00:11:22,066 --> 00:11:24,566
什么是SRC_ALPHA，什么是ONE_MINUS_SRC_ALPHA
well what's SRC_ALPHA, what's ONE_MINUS_SRC_ALPHA

237
00:11:24,566 --> 00:11:25,633
我刚听说
I'm just told

238
00:11:26,066 --> 00:11:28,033
将其设置为我的混合函数，并保持不变
set that as my blend function and leave it as that

239
00:11:28,033 --> 00:11:29,300
但是它是如何工作的呢
but how does it actually work

240
00:11:29,566 --> 00:11:32,166
这就是它的工作原理，希望你们喜欢
well this is how it works, so I hope you enjoyed that

241
00:11:32,433 --> 00:11:34,166
如果你们喜欢的话，可以点击这个喜欢按钮
if you did, you can hit the like button

242
00:11:34,275 --> 00:11:37,603
也可以访问patreon.com/TheCherno来支持这个系列
it also helps support this series by going to patreon.com/TheCherno

243
00:11:37,603 --> 00:11:40,833
像往常一样，非常感谢所有支持这个系列的人
huge thank you as always to all the people who are supporting this series

244
00:11:40,933 --> 00:11:44,366
没有这些人，就不会有今天，非常感谢你们
it would not be here without those people, so huge thank you

245
00:11:44,450 --> 00:11:45,933
说真的，每个人都应该感谢他们
everyone should be thanking them really

246
00:11:45,933 --> 00:11:47,533
如果你们喜欢这个系列
if you are enjoying this series

247
00:11:48,100 --> 00:11:50,366
希望你们喜欢这个ppt演示的风格
hope you enjoyed this little powerpoint presentation style

248
00:11:50,366 --> 00:11:51,600
我其实挺喜欢的
I actually quite liked it

249
00:11:51,600 --> 00:11:53,700
因为我不用整天挥舞双手
because instead of me waving my hands around all day

250
00:11:53,800 --> 00:11:56,800
试着画图，试着把它形象化
and actually trying to draw things and try and visualize this

251
00:11:56,800 --> 00:11:58,966
或者尝试现场绘制东西
or attempting to actually draw stuff live

252
00:11:59,325 --> 00:12:03,033
我可以制作这些精致的小图表，淡入动画
I can just kind of make these cute little diagrams and fade in animations

253
00:12:03,066 --> 00:12:06,033
我不知道，我的意思是，我个人认为这是一个非常酷的想法
and I don't know, I mean, I personally think it's a really cool idea

254
00:12:06,266 --> 00:12:08,500
请在下面的评论区告诉我你们的想法
let me know what your thoughts are in the comment section below

255
00:12:08,900 --> 00:12:11,200
下次我们将继续我们的渲染和所有这些
next time we're going to continue on with our render and all that

256
00:12:11,433 --> 00:12:13,866
很酷的东西，现在我们有了混合，这是非常重要的
cool stuff, now that we have blending working, that's very important

257
00:12:13,866 --> 00:12:17,725
在那之前，我们可以开始正确渲染纹理
and we can actually start rendering textures properly until then

258
00:12:17,725 --> 00:12:19,400
下次见，拜
I'll see you next time, goodbye

