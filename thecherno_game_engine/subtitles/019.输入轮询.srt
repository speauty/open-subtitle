1
00:00:00,100 --> 00:00:03,400
嘿，你们好，我是TheCherno，欢迎回到我的游戏引擎系列
hey, what's up guys, my name is TheCherno, welcome back to my game engine series

2
00:00:03,733 --> 00:00:10,125
那么上次我们看了合并请求，并将其中一些合并了，如果还没有看过那期，一定要去看看
so last time we took a look at github pull requests and merge some of those in, make sure that you check out that video, if you haven't already

3
00:00:10,350 --> 00:00:14,450
今天我们终于要做一件我很久以来一直想做的事情
today we're gonna finally get to something that I've been wanting to do for a really long time

4
00:00:14,450 --> 00:00:18,600
为了我自己的理智，真的，那就是轮询输入，对吧
just for my own sanity really, and that is polling input, right

5
00:00:18,966 --> 00:00:24,450
所以我们构建了整个事件系统，这很好，因为你们知道，有一个接收事件的事件系统
so we set up this whole event system, which is great, because you know, having an event system receiving events

6
00:00:24,450 --> 00:00:29,766
无论何时我们按下键或将其移出，就像调整窗口大小一样，那一切都很棒
whenever we press the key or move them out, so like the window resizes, that's all fantastic

7
00:00:29,766 --> 00:00:37,925
并且那将为我们在Hazel中实际构建的许多东西奠定基础，但输入仍然有很重要的一方面
and that's gonna form the basis for a lot of what we actually build in Hazel, but there is still the other side of input, that is important

8
00:00:38,266 --> 00:00:43,025
那就是轮询输入，所以那基本上就是在事件发生时，不需要通知我
and that is polling input, so that's basically when instead of me being notified when something happens

9
00:00:43,500 --> 00:00:52,623
我可以在程序中的任何时候询问，嘿，这个键是不是按下了，这个鼠标按钮是不是按下了
it's me being able to at any point at any point in our program ask, hey, is this key down, is this mouse button down

10
00:00:53,266 --> 00:00:58,766
你们知道我在移动鼠标时是否按住Alt，因为如果那样做，那么其他东西可能需要移动
you know am I holding the alt key as I move my mouse, because if we do that, then something else might want move

11
00:00:58,766 --> 00:01:03,125
如果按住鼠标，我们可能想改变鼠标移动的行为，对吧
we might want to change what that mouse move does based on if that's held down, right

12
00:01:03,333 --> 00:01:09,221
比如说，我们正在实现一个相机控制器，对吧，我们想要一个像沼泽一样的相机
for example let's just say, we're implementing a camera controller, right, and we want like a mire style camera

13
00:01:09,366 --> 00:01:14,566
按住Alt键，然后用鼠标中键或左键旋转
where we hold down alt, and then like you know the middle mouse button or the left mouse button to rotate you know

14
00:01:14,700 --> 00:01:20,975
然后我们移动鼠标，我想检查Alt是否按下，我想检查鼠标左键是否按下
and then we move the mouse, I want to check the alt keys down, I want to check if the left mouse button is down

15
00:01:21,300 --> 00:01:27,366
如果是这样，当我移动鼠标时，可能会收到MouseMoveEvent，在MouseMoveEvent上
and then if so when I move the mouse, I might receive a MouseMoveEvent, and on that MouseMoveEvent

16
00:01:27,366 --> 00:01:36,475
如果Alt和左键都按下了，那么我想旋转相机，对吧，诸如此类，希望能够真正询问Hazel
if the alt and the left mouse button are down, then I want to rotate the camera, right, stuff like that, we want to be able to actually ask Hazel

17
00:01:36,800 --> 00:01:41,800
按键是否被按下，现在很明显，这些都可以由客户端实现，比如我们构建的事件系统
if something is down, now obviously this could all be implemented clients, like from this event system that we've built

18
00:01:42,866 --> 00:01:49,750
对我们来说，很容易就好像好吧，好吧，在我的Layer中，每次我得到MousePressedEvent
it's very easy for us to simply be like okay well fine, in my Layer every time I get a MousePressedEvent

19
00:01:49,750 --> 00:01:55,476
我只需将鼠标左键设置为按下，然后鼠标释放将其设置为false，这样我就可以检查
I'll just set the left mouse button to be pressed, and then the mouse release develop set it to false, and that way I can check

20
00:01:55,866 --> 00:02:01,400
嗯，是的，你们可以，但很明显，要做到这一点并构建自己的系统会有点麻烦
well yes you can, but obviously that's a bit of a hassle having to do that for everything and build your own system

21
00:02:01,400 --> 00:02:06,550
为什么要构建系统来实现那个，如果Hazel真能提供那些，那么那就是今天要做的
why build your own system to do that, if that's something that Hazel can actually provide, so that's what we're gonna do today

22
00:02:06,550 --> 00:02:10,375
我们要看看输入，创建一个Input类，就像WindowsInput一样
we're gonna take a look at input, we're gonna make a class called Input, and like WindowsInput

23
00:02:10,375 --> 00:02:18,247
因为它可能会依赖于平台，至少，我的意思是，整个平台依赖性的事情现在有点可疑
because it'll probably be platform dependent at least, I mean, the whole platform dependency thing is a little bit shady right now

24
00:02:18,466 --> 00:02:23,100
因为我们使用的是GLFW，这在理论上意味着所有桌面平台都将使用GLFW
because we are using glfw, which theoretically means that all desktop platforms will use glfw

25
00:02:23,500 --> 00:02:30,000
但仍像我提到的那样，和对WindowsWindow类所做的，对吧，我正把那些分到每个平台
but I still as I mentioned and what I did with the WindowsWindow class, right, I am splitting everything up per platform

26
00:02:30,333 --> 00:02:33,675
我这样做的原因是，将来我们可能会想移除glfw，
the reason I'm doing that is because in the future, we might want to move away from glfw, 

27
00:02:33,950 --> 00:02:37,499
比如我们可能会想在Linux或Mac上使用其他东西，而不是Windows
as we might want to use something else on Linux or Mac, versus Windows

28
00:02:37,500 --> 00:02:43,375
因此，那将是一个巨大的重构，我不想那样做，我仍然想保持所有平台的独立
and so because of that, that'll be a huge refactor, I don't want to do that, I still want to keep all the platforms separate

29
00:02:43,375 --> 00:02:51,266
以防这些文件中可能有些我们最终只为该平台制作的，所以那就是原因，让我们开始吧
 in case there's maybe something in those files that we end up making only for that platform, so that's the reason for that, let's jump in

30
00:02:51,266 --> 00:02:56,875
让我们实现这个输入类，好了，我首先要做的是在这里的Hazel中
let's implement this Input class, okay, so the first thing that I want to start off by doing is over here in Hazel

31
00:02:57,566 --> 00:03:07,000
我要到源代码处来解释平台和Hazel，然后在Hazel这边，确保显示所有文件
I'm going to come over into source will explain platform and Hazel, and then just over here in Hazel, making sure that I've got show all files showing

32
00:03:07,400 --> 00:03:15,066
所以我不会创建过滤器，我要添加一个新项目，我们将其称为Input.h，就是那样
so that I'm not creating something filters, I'm going to add a new item, we're going to call it Input.h, and that's really all it's going to be

33
00:03:15,066 --> 00:03:21,210
我们只需要一个头文件，就是包含，与Window.h文件非常相似
we're just going to have a header file, that is out input, this is very similar to what we had for the window header file

34
00:03:21,401 --> 00:03:29,012
但我们只有一个Window.h文件，然后从那里开始，它只是一个真正的接口
but we just had a just this Window.h file, right and then from there, it was just really an interface

35
00:03:29,200 --> 00:03:34,500
然后就有了一个实现，在这里也有WindowsWindow，我们将遵循同样的惯例
and then from there we had an implementation, where we had WindowsWindow, we're gonna kind of follow that same convention here

36
00:03:34,766 --> 00:03:41,808
我们将在WindowsWindow中实现所有内容，然后这将只是那样，对吧，但有一点不同
we're gonna implement everything inside WindowsWindow, and then this will just kind of be just that, right, but there's a bit of a difference

37
00:03:41,933 --> 00:03:49,125
因为对于Window这里的一切，它们只是方法，而对于Input，Input将是静态的
because with window everything here, they're just methods, whereas with Input, Input is going to be static in the sense that

38
00:03:49,766 --> 00:03:58,300
将有一种全局输入类型的管理器，就是那样，而你们可能有几个窗口，诸如此类
there's going to be one global input kind of manager, and that's it, whereas you can have potentially several windows several things like that 

39
00:03:58,300 --> 00:04:04,680
对于Input，我不想它变成，变成每个窗口或任何类似的东西，它应该是全局的
input, I don't want to be, I don't want that to be per window or anything like that, it's going to be global

40
00:04:05,025 --> 00:04:15,150
现在从技术上讲，你们可能会得到，比如独立窗口就很有趣
now technically speaking, you will probably have like the separate windows thing is interesting 

41
00:04:15,150 --> 00:04:21,733
因为，再说一次，我不想让Window完全是静态的，现在是那样的，因为如果你们看看应用
because again I didn't want to make window completely static, it is right now though, because if you look at application

42
00:04:21,733 --> 00:04:29,605
一个静态的应用，每个Hazel有个应用，显然只有一个独立窗口，所以现在只能有一个窗口
an application is static, you have one application per Hazel, that obviously has a single window, so right now you can only have one window

43
00:04:29,933 --> 00:04:34,025
因此，Window是否静态，在这一点上并不重要，但至少现在的Input是静态的
so whether or not window a static, doesn't matter at this point, but input for now at least, we'll be static

44
00:04:34,166 --> 00:04:39,066
我们有很多方法可以解决那个，其中有一些有趣的复杂性
there are many ways that we could deal with that, and there are kind of interesting complications to that

45
00:04:39,066 --> 00:04:44,000
因为一方面，如果有多个窗口，那么可能需要轮询特定窗口的输入
because on one hand, if you have multiple Windows, then maybe you want to poll input from a particular window

46
00:04:45,300 --> 00:04:51,200
另一方面，如果它是静态的，你们仍然可以这样做，可以说如果询问输入类
on the other hand if it's static, you can still do that, you could just say that if you ask the input class

47
00:04:51,375 --> 00:04:54,566
如果按下鼠标按钮，将对当前活动窗口执行此操作
if the mouse button is pressed, it will do that for the currently active window

48
00:04:54,566 --> 00:05:00,725
因为很明显，一次只能有一个窗口处于活动状态，你们的计算机上不能同时聚焦两个窗口
because obviously, you can only have one window active at once anyway, you can't have two windows focused at the same time on your computer

49
00:05:00,725 --> 00:05:06,485
所以，是的，有很多事情要考虑，我不会花太长时间去考虑所有事情
so yeah there's a lot of things to consider, I'm not gonna kind of spend too long kind of going through all of them

50
00:05:06,733 --> 00:05:10,975
因为我不认为这是必要的，但不管怎样，我们只是从输入类开始，看看它会把我们带到哪里
because I don't think that's necessary, but anyway, we're just gonna begin with the input class, and see where that takes us

51
00:05:11,050 --> 00:05:21,386
那么就是HAZEL_API Input，然后包含Core.h
so HAZEL_API Input, I'm going to include I don't even know what it's Core anymore, I think it's Core something else in my repository

52
00:05:21,966 --> 00:05:29,275
但是Hazel/Core.h得到HAZEL_API，然后我们基本上只需要一堆静态函数
but Hazel/Core.h to get that HAZEL_API thing, and then we're just gonna have essentially just a bunch of static functions 

53
00:05:29,325 --> 00:05:37,131
所以就是IsKeyPressed，这可能是最重要的一个方法，我们只需要接收一个keycode
so IsKeyPressed, it's kind of probably one of the most important ones, we're just gonna take in a keycode

54
00:05:37,800 --> 00:05:44,800
现在，将最终成为一个glfwKeycode，因为没有按键代码，我们需要创建自己的按键代码
now right now this will end up being a glfwKeycode, just because we don't have key codes, we need to make our own key codes

55
00:05:44,800 --> 00:05:52,125
我一直强调，可能在下期做那个，但我们需要按键代码，因为无法将我们与glfw联系起来
I've been stressing that for a lot, we might do that next episode, but we need to have our own key codes, because we can't tie ourselves to glfw

56
00:05:52,366 --> 00:05:57,975
当然，这在其他平台上也会有潜在的不同
because of course that's going to end up being potentially different on other platforms as well

57
00:05:57,975 --> 00:06:04,850
很明显，一旦我们接触Android或其他类型的设备，这将不会成为一件事
as obviously like that's not going to be a thing on like android or other kind of devices, once we get into that space as well

58
00:06:05,650 --> 00:06:11,600
现在是这样的，这是静态的，但是我要做的是，我要把它做成一个单例
now here's the thing, this is static, however what I'm going to do is I'm actually going to make this a single tent

59
00:06:11,600 --> 00:06:17,050
我们将有一个这样的输入类的单例
so we're going to have a single instance of this input class like that

60
00:06:17,333 --> 00:06:25,000
然后我们最终要做的是返回s_Instance，然后可能是这个函数的实现
and then what we're going to end up doing is returning s_Instance, and then probably the implementation of this function

61
00:06:25,000 --> 00:06:33,725
这就是有趣的地方，因为虽然是同一个方法，但我们最终要做的是拥有受保护的虚函数
now this is where it gets interesting, because whilst that is a thing, what we're actually going to end up doing is having protected virtual functions

62
00:06:34,300 --> 00:06:41,825
所以本质上这个IsKeyPressed，还会有一个虚函数版本，它不是静态的
so essentially this IsKeyPressed, we're going to have a virtual version of that, which is not static

63
00:06:42,066 --> 00:06:48,650
我们将其称为IsKeyPressedImpl，听起来像是接口，然后将接收一个keycode
we're going to call it IsKeyPressedImpl, sounds for implementation, and then that's going to take in a keycode of course

64
00:06:48,650 --> 00:06:55,600
那将是纯虚函数，所以这就是我们在每个平台上实际需要实现的
and that's going to be pure virtual, so this is what we implement per platform in that actual like realization

65
00:06:55,600 --> 00:07:01,375
我猜是这个接口，因为这只是一个接口，我们确实有一个变量，但它是静态的
I guess of this interface, because this is just an interface, we do have like a variable, but it's static

66
00:07:01,533 --> 00:07:06,475
所以它实际上不属于这个类，这个类绝对没有数据，这只是一个静态
so it doesn't actually belong to this class, this class has absolutely no data in it, this is just a static

67
00:07:07,425 --> 00:07:15,325
全局变量s_Instance不属于该类，所以那基本上就是整个过程的原理
global kind of s_Instance does not belong to the class, so that's essentially how this whole thing is gonna work

68
00:07:15,325 --> 00:07:22,250
然后在那里调用它，然后就可以了，对吧，也就是IsKeyPressed调用具体实现(Impl)
and then that's gonna call that, and then there you go, okay, so IsKeyPressed calls the implementation

69
00:07:22,466 --> 00:07:28,200
并且很明显，那是由你们接口实现的
and then that obviously is something that will be kind of implemented by your interface

70
00:07:28,566 --> 00:07:35,875
因此在Windows平台中添加其他内容之前，我将为你们展示个示例，创建新项目
so just to kind of show you an example before I add everything else in platform windows, I'm going to make a new item

71
00:07:36,166 --> 00:07:42,625
我将创建一个头文件，就是WindowsInput.h
I'm going to make a header file, that's going to be called WindowsInput.h

72
00:07:43,600 --> 00:07:49,475
然后我还要创建一个同名的cpp源文件，也就是WindowsInput.cpp
and then I'm also going to make a cpp file with the same name, so WindowsInput.cpp

73
00:07:50,533 --> 00:07:57,450
当然要包含预编译头，每次创建新文件时，尤其是cpp文件，你需要重新运行premake
I'm going to include my precompiled header of course, every time you're making new files, by the way, especially cpp files, you need to rerun premake

74
00:07:57,450 --> 00:08:03,725
因为就目前而言，我不确定这是否真的会被包含在预编译头中
because as this stands, I'm not sure whether or not this will actually be included in the precompiled headers

75
00:08:03,966 --> 00:08:09,125
你们可以看到，这个设置成了Use，因为这是我们项目的默认设置，所以实际上不用管它
it may be, you can see, this set to use, because that's the default for our project, so actually maybe you don't have to read on it

76
00:08:09,466 --> 00:08:17,822
我通常只是为了理智，但这不是你们必须做的事情，所以我们将包括WindowsInput.h
I usually do anyway just for sanity, but it's not something you have to do, so we'll include WindowsInput.h

77
00:08:18,500 --> 00:08:30,250
然后显然要在这里做些什么，当复制这个，并把它放在这里，我们将包含Hazel/Input.h
and then we're gonna obviously do something here, and when I copied this cpp, and put it in here, we're going to include Hazel/Input.h

78
00:08:32,533 --> 00:08:40,850
这将是class HAZEL_API，实际上我可能不想将其导出到dll文件中
and this will be class HAZEL_API, well actually I don't probably don't want to actually export this into the dll file

79
00:08:41,100 --> 00:08:47,875
所以我们可能会说，就像我们不认为，我们希望这样，我的意思是我们可能不需要
so we'll probably just say, like we don't I don't think, we want it to be, I mean we might, yeah we probably won't have to

80
00:08:48,266 --> 00:08:58,775
我们将看到它是如何运行的，然后这会覆盖它，所以就是protected，这会重写我们的函数
we'll see how this works though, so and then this will kind of just override that, so protected, this will kind of just override our functions

81
00:08:58,775 --> 00:09:17,275
所以就是virtual bool IsKeyPressed(int keycode)，对吧，重写了Input的，应该是这个
so our virtual bool IsKeyPressed, int keycode, okay, so that's the override from input, sorry this one obviously

82
00:09:19,800 --> 00:09:29,975
然后我们将实现它，然后这将真正调用glfw，然后在那里做我们需要做的一切
and then we'll kind of just implement that, and then what this will actually do right is actually called glfw, and then do everything that we need to kind of do there

83
00:09:30,333 --> 00:09:40,275
因此这将与glfw关联，完全可行，因为它位于Windows中，位于特定于平台的cpp文件中
so this will be tied to glfw, which is totally fine, because it's inside the Windows, it's inside our platform specific cpp file

84
00:09:41,333 --> 00:09:44,625
所以它不会在GLFW可能不可用的任何地方进行编译
so it's not going to get compiled on it anywhere where GLFW might not be available

85
00:09:45,450 --> 00:09:51,133
我们要做的是从Application中获取window，然后我们需要获取GLFWWindow
what we're gonna do is we're gonna actually get the window from the Application, and then we actually need to get the GLFWWindow

86
00:09:51,133 --> 00:09:55,275
所以这很有趣，因为我认为我们确实有一个实现，但它可能需要更改
so this is interesting, because we do have an implementation for this I think, but it might need to be changed

87
00:09:55,700 --> 00:10:01,300
因为现在的情况是，如果你们看看我们的Window.h，实际上很有趣
because here's the thing right at the moment if you take a look at our Window, it's quite interesting actually

88
00:10:01,300 --> 00:10:04,500
我很高兴能进入这个文件，因为它打开了很多文件
I'm kind of glad that we're getting into this, because it opens up a lot

89
00:10:04,500 --> 00:10:12,466
所以我们目前无法访问它，对吧，我们有一个GLFWWindow
so at the moment we have no way to access this, right, we have a GLFWWindow

90
00:10:12,466 --> 00:10:18,425
然而，我们目前无法访问它，现在可以做几件事，比如我们可以将其公开
however we can't access that at the moment, now there's several things we could do, we could make this public

91
00:10:18,425 --> 00:10:20,000
那可能是你们能做的最糟糕的操作了
that'll be probably the worst thing you could do

92
00:10:20,325 --> 00:10:24,975
我们也可以让WindowsInput成为WindowsWindow的友元，那就比较有意义了
we could make WindowsInput a friend of WindowsWindow, that would make sense 

93
00:10:24,975 --> 00:10:31,500
因为将Input和Window绑定在一起可以做到这一点，但因为我想让这个接口变得更加强大
because input window kind of tied together could do that, but because I want to kind of make this api somewhat powerful

94
00:10:31,500 --> 00:10:36,950
甚至对客户端的人来说，他们可能出于某种原因想实现一些Hazel没有的操作
and potentially to people even in the client side, who might want to for some reason do something that Hazel doesn't do

95
00:10:37,266 --> 00:10:42,425
我实际上想要一个函数，一个接口中的公开函数，也就是暴露GLFWWindow
I actually want a function a public function in the api, which exposes GLFWWindow

96
00:10:42,966 --> 00:10:48,825
很明显，我希望这是一个可移植的
now I obviously want this to be somewhat portable

97
00:10:48,825 --> 00:10:53,366
就像我不希望这是特定于WindowsWindow或类似的东西一样
and like I don't want this to be specific for WindowsWindow or anything like that

98
00:10:53,366 --> 00:11:03,300
我不想做太多，所以我们最终要做的是在Window中，实际上要在这里添加一些东西
I don't want to do too much of that, so what we're actually gonna end up doing is inside a Window, we're actually going to add something here

99
00:11:03,300 --> 00:11:12,225
实际上就是virtual void* GetNativeWindow()，好了，将要做的就是，标记一下const
which is essentially going to be a virtual void pointer GetNativeWindow, okay and what this will do is, we'll make that const

100
00:11:12,550 --> 00:11:21,425
这将实际返回一个GLFWWindow，之所以是个void*，是因为它不一定是GLFWWindow
what this will do is actually return a GLFWWindow, that reason it's a void pointer is because of course, this doesn't have to be a GLFWWindow

101
00:11:21,425 --> 00:11:27,700
如果我们使用其他类似的窗口库，比如HWindow或类似的一样返回，对吧
if we're using some other windowing library like this could potentially return like an HWindow or something like that could be anything, right

102
00:11:28,000 --> 00:11:36,187
但在本例中只返回原生窗口，好了，只返回这种GLFW指针，所以我们就复制这个
but in this case is returning just this native window, okay, just this kind of glfw pointer in this case, so we'll copy this

103
00:11:37,066 --> 00:11:47,775
我们来到WindowsWindow，粘贴到这儿，标记为inline，我可能会将其保持为virtual
we'll go into WindowsWindow, we'll paste this in, we can make it in line, and I'll probably keep it as virtual

104
00:11:47,966 --> 00:11:52,075
这是我经常遇到的另个问题，为什么要在这保持virtual
this is another question I get quite often, why do I keep virtual in here

105
00:11:52,275 --> 00:11:55,650
对吧，所以我不是每种方式都这么做，可以看到，我真的没有
right, so I don't do it every way, you can see I really don't

106
00:11:55,650 --> 00:12:00,625
我有时会这样做，可能应该更频繁地这样做，但举例来说，在这里，我把它保持为virtual
I do sometimes, I probably should do it more often, but for example in here, I kept this as virtual

107
00:12:00,625 --> 00:12:06,925
并且像一些人会喜欢扩展这个WindowsInfo类，可以有这个类的子类吗
and people like well hang on do is something going to like extend this WindowsInfo class, am I gonna have a child of this class

108
00:12:06,925 --> 00:12:14,425
那就是为什么我想要这个，答案是不，没关系，问题是当你们在基类中创建虚函数时
and that's why I want this there, the answer is no, it doesn't matter, the thing is when you make something virtual over here in the base class

109
00:12:14,800 --> 00:12:22,199
就像这个函数派生结构下的所有函数一样都是虚函数，因此如果我不在这里标记virtual
everything down the hierarchy, like everywhere down the hierarchy, this function will be virtual, so if I don't put virtual here

110
00:12:22,533 --> 00:12:27,125
没关系，它仍然是一个虚函数，为什么，因为它显然是从一个虚函数派生出来的
doesn't matter, it's still a virtual function, why, because it's obviously deriving from a virtual function

111
00:12:27,466 --> 00:12:32,800
所以这是没有意义的，就像没有把它放在那里并不意味着这突然就不是虚函数了，对吧
so this is meaningless like just because you don't put it there does not mean this is suddenly not virtual, okay

112
00:12:33,150 --> 00:12:38,575
所以可以把它放在那里，因为这是一种提醒，它是虚函数，有点像为什么使用override
so you might as well put it there, because that's kind of a reminder of the fact that it is virtual, it's kind of like why we use override

113
00:12:38,875 --> 00:12:44,875
虽然override实际上会生成编译错误，比如类型错误之类，因为实际上并没有重写任何内容
although override actually will generate compile errors, if you like you know mistype something, because you're not actually overriding anything

114
00:12:45,175 --> 00:12:51,425
虽然虚函数不会，但这只是个提醒，实际上是一个虚函数，同样，你们可能不需要标记它
whereas virtual won't, but it's just a little reminder that this is in fact a virtual function, again you might not need to have that

115
00:12:51,425 --> 00:12:55,500
因为这里有override，很明显，它重写了一个虚函数
because you have override there, and that makes sense that obviously, it's overriding a virtual function

116
00:12:55,825 --> 00:13:00,799
但通常像大多数人一样，决定把它留在这里，因为它实际上是一个虚函数
but usually like most people decide to actually leave this in here, because it is in fact a virtual function

117
00:13:00,800 --> 00:13:07,250
那么，为什么不在代码中增加可读性，让你们知道这是一个虚函数呢
so why not have just that extra readability in your code to kind of just you know, let you know that it is a virtual function

118
00:13:07,766 --> 00:13:15,966
那就是为什么那么做的原因，对吧，因为有没有它没有关系，这就是GetNativeWindow
so that's why I do that, okay, because it doesn't make a difference whether you have it or not, okay, so so there's our GetNativeWindow

119
00:13:15,966 --> 00:13:21,925
这将返回m_Window，也就是GLFWWindow，太棒了，现在我们已经得到了那个
and this is just going to return our m_Window, which is our GLFWWindow, fantastic, now that we've got that

120
00:13:22,900 --> 00:13:29,900
回到WindowsInput，我们需要做的就是访问窗口，顺便说一下，我们需要访问窗口的原因
back in WindowsInput, all we need to do to access our window, and by the way the reason we need to access our window

121
00:13:30,166 --> 00:13:38,140
也许我应该从这开始，因为需要调用glfwGetKey，好了，告诉我们按键是否真的被按下了
maybe I should start with that is because we want to call glfwGetKey, okay, that's going to tell us whether or not a key is actually down

122
00:13:38,750 --> 00:13:45,500
因此，我们需要在这里转换的第一件事实际上是传递到这里的是窗口指针，然后是keycode
so the first thing that we need to cast into here is actually to pass into here is our window pointer, and then it's the keycode

123
00:13:45,733 --> 00:13:50,850
所以keycode很简单，但窗口指针是我们需要实际传入的，所以这就是在这里要做的
so keycode easy, but window pointer something that we need to actually pass in, so that's what we're doing here

124
00:13:51,000 --> 00:14:05,825
window = Application，所以需要包含Hazel/Application.h，要做的就是Application::Get()
we're getting window, which is going to be equal to application, so we need to include Hazel application, we're doing application get

125
00:14:06,366 --> 00:14:13,375
然后就是GetWindow，好了，返回了window引用，一旦我们得到了window引用
and then GetWindow, okay, this gives us back just a window reference, once we have that window reference

126
00:14:13,566 --> 00:14:19,625
我们可以获得GLFWWindow，对吧，通过GetNativeWindow
we can get the GLFWWindow, right, by doing GetNativeWindow

127
00:14:19,625 --> 00:14:22,510
所以这将是，我们可以就按这个顺序保留
so this is going to be, we can just leave this as order

128
00:14:22,800 --> 00:14:25,766
实际上在这种情况下，如果我们看看这个，它是一个空指针
so this actually in this case, if we look at this it's a void pointer

129
00:14:25,766 --> 00:14:30,400
那太棒了，但我们实际上需要把它转换成GLFWWindow指针，对吧
that's fantastic, but we actually need to be a GLFWWindow pointer right

130
00:14:30,766 --> 00:14:36,775
所以我们将使用static_cast处理它，好了，就是static_cast(GLFWWindow*)，然后就那样
so we'll just static_cast it to that, okay, so static_cast GLFWWindow, and then that

131
00:14:37,600 --> 00:14:47,130
现在这当然是GLFWWindow指针，很好，可以把它传递到窗口中，这个函数不错，好了
so now this of course is the GLFWWindow pointer, perfect, we can pass that into window, and there we go, our function is fine, okay

132
00:14:47,466 --> 00:14:52,800
所以这当然会返回状态，无论它是不是被按下了，那么就是auto state等于那个
so this of course returns the state whether it's kind of pressed on art, so we'll say auto state equals that

133
00:14:53,200 --> 00:15:02,250
然后在这里，我们只需要返回它是否被按下，所以return state == GLFW_PRESS || GLFW
and then here, we just need to return whether or not it's pressed, so return state equals GLFW_PRESS right or GLFW

134
00:15:04,266 --> 00:15:11,150
就是GLFW_REPEAT，对吧，哎呀，我不知道为什么打成了static，所以我们继续
what is it repeat right, like that, oops, I don't know how I type static, so there we go

135
00:15:11,366 --> 00:15:15,650
所以现在要做的实际上是，询问GLFW是否按下了这个键
so now what we're doing here is actually, we're asking glfw if this key is pressed

136
00:15:15,650 --> 00:15:17,800
或者是否重复，或其他什么的，如果基本上就是按下
or if repeat or whatever, if tell down basically

137
00:15:18,600 --> 00:15:25,550
然后返回true，否则如果想知道另一个状态，也就是释放，那么将返回false，所以我们继续
then we'll return true, otherwise if it's you know the other state, which would be a release, then it's gonna return false, so there we go

138
00:15:25,625 --> 00:15:29,625
现在我们有了这个，非常简单，非常简单，现在我们有了一种方法来获得原生窗口
there we have that, pretty easy pretty simple, and now we have a way to also get the native window

139
00:15:29,625 --> 00:15:36,600
真的很酷，很强大，好了，那么如果我们回到Input.h，希望这是有意义的
which is really cool and really powerful, okay, so if we go back to Input, so hopefully this makes sense

140
00:15:36,600 --> 00:15:43,425
对吧，我们静态调用，也就是Input::IsKeyPressed()，输入keycode，现在是GLFWKeycode
right, we statically call Input colon colon IsKeyPressed, we put in our key code, which right now is the GLFWKeycode

141
00:15:44,000 --> 00:15:48,097
所以很明显，我们需要包含glfw来使用这个，有点不幸，但暂时就是那样
so obviously we need to include glfw to use this, which is a little bit unfortunate, but that's just the way it is for now

142
00:15:49,000 --> 00:16:01,425
然后从这调用实现，这是个虚函数，在我们的例子中，它被调度到这个WindowsWindow中
and then from here, this calls the implementation of it, which is a virtual function, which in our case gets dispatched into this WindowsWindow

143
00:16:01,633 --> 00:16:07,133
抱歉，应该是WindowsInput，并触发了这个函数，它当然使用的是glfw
sorry, WindowsInput class, and cause this function, which of course actually use glfw

144
00:16:07,133 --> 00:16:16,400
那就是我们获取按键的方式，希望那些都有意义，好了，酷，那就是那个原理
and that's how we get our key, so hopefully all of that makes sense, okay, cool, so that is kind of how that works

145
00:16:16,400 --> 00:16:23,650
现在让我们返回去，实际上将进入Info.h，剩下的就交给我们了，对吧
now let's go back and actually we'll go into Info.h, and we'll do the rest of this, right

146
00:16:23,933 --> 00:16:27,350
因此，我们在这里需要做的其他事情实际上只是鼠标的东西
so the other things that we need to do for here is really just mouse stuff

147
00:16:27,350 --> 00:16:30,300
并且那可能是我们现在要做的全部，所以我们将有一个静态方法
and that's probably all we'll do for now, so we'll have a static

148
00:16:32,466 --> 00:16:38,725
让我们看看，顺便说一下，这一切都是内联调用的，因为很明显这是在这里实现的
let's see, this can all be inline by the way, because obviously this implemented right here

149
00:16:39,500 --> 00:16:47,733
但这就是static float，例如将实现鼠标位置，但要先做鼠标按钮，IsMouseButtonPressed
but it'll be a static float, for example we'll do the I was gonna do mouse position, but I'll do mouse button first IsMouseButtonPressed

150
00:16:50,175 --> 00:17:03,475
然后接收int button，返回IsMouseButtonPressedImpl(button)，希望你们能看到那个
and then we'll do our int button, that will return oops IsMouseButtonPressedImpl button, hopefully you guys can see that

151
00:17:03,475 --> 00:17:16,400
但如果没有，那么就会返回，对吧，我们马上会写那个，然后是GetMouseX和GetMouseY
but if not, then that's what it returns, right, and we'll make that function in a minute, and then we'll do GetMouseX, GetMouseY

152
00:17:17,300 --> 00:17:29,750
很明显，你们可以继续填写，但现在我想可能就是那样了，暂时不需要其他东西
and you can like keep like filling this out obviously, but for now I think that's probably it, we don't only think we need anything else for now

153
00:17:29,750 --> 00:17:57,525
所以我能想到的是，实际上我们会实现这些，这些是浮点数，好了，现在我们有了一切
so I can think of really, and we'll just actually do this and that and that, and these are floats, okay, so now we have everything

154
00:17:57,933 --> 00:18:00,525
我们显然需要实现这个，所以回到WindowsWindow
we obviously need to implement this, so back into WindowsWindow

155
00:18:00,525 --> 00:18:04,650
抱歉，应该是WindowsInput，我总是混淆这两个
sorry, WindowsInput we go, I always confuse the two, whoops

156
00:18:08,900 --> 00:18:13,800
好了，那么我们就可以去掉这个并加上override
all right, so we can take this away and override

157
00:18:17,275 --> 00:18:25,175
我将使用辅助工具来实现所有这些，然后我们可以真正实现所有这些方法了
I'll implement all of them just using visual assist, and then we can just implement all of them really 

158
00:18:25,175 --> 00:18:36,825
同样，用MouseButton代替glfwGetKey，也就是glfwGetMouseButton(window, button)
so again with the MouseButton exactly the same thing instead of glfwGetKey, we do glfwGetMouseButton, window and button

159
00:18:37,100 --> 00:18:42,675
现在你们知道的，对于按钮，可没有重复状态
now there's no such thing as the repeat state for mouse buttons you know

160
00:18:42,675 --> 00:18:51,075
所以这将是GLFW_PRESS，然后对于这个，很好，粘贴过去就行
so it's just going to be GLFW_PRESS, and then for this, nice, well paste is in

161
00:18:52,600 --> 00:19:08,350
我们实际要使用的是glfwGetCursorPos，还需要window，然后将xpos ypos作为输出
where we're actually going to use is glfwGetCursorPos, and then we need window, and then double xpos ypos as output parameters

162
00:19:10,150 --> 00:19:16,800
好吧，然后我们需要通过它们的内存地址传入，所以那就是指针
all right, and then we need to pass these in by their memory address,so that's pointers

163
00:19:16,850 --> 00:19:25,966
然后再来看看这个返回，可能会像，嘿，伙计，那是浪费时间，就像你们知道的那样
and then we'll just return in this case, now this could be like, hey man, that's look this is a waste of time, like then you know this is

164
00:19:25,966 --> 00:19:30,125
你们两个都做了，两个都做了，而你们只是回到了目标位置
you're doing both, you're getting both here, whereas you're only returning des position

165
00:19:30,350 --> 00:19:35,425
我同意这有点烦人，我们可以以组或类似的形式返回两者
and yeah I agree it's a bit annoying, we could return both definitely as a tuple or something like that

166
00:19:35,866 --> 00:19:39,400
事实上，我们现在可能会这么做，我将向你们展示那是如何做到的，只是为了娱乐
in fact we might do that just now, and I'll show you guys kind of how that works for fun

167
00:19:41,050 --> 00:19:54,825
所以这在ypos是一样的，所以我们回到Input.h，我们将快速进行创建GetMousePosition
so this is the same at ypos, so we'll go back to Input, and we'll do a quick lid hole GetMousePosition

168
00:19:59,200 --> 00:20:22,425
我把它放在这里，这将返回一对浮点数，GetMousePosition，酷，我们复制一下
I'll put it up here GetMousePosition, this will return a sity pair of float and float, GetMousePosition, cool, let's copy this maybe

169
00:20:22,950 --> 00:20:43,875
我们就那样做，好的，然后很明显会在WindowsInput中实现，就像那样，这是鼠标的东西
and we'll just do that, okay, and then we'll obviously implement that inside WindowsInput just like that, this is mouse stuff

170
00:20:44,766 --> 00:20:53,200
我将从中创建一个函数，然后也会这样做，但很明显，在这里它将返回组
I'll create a function out of it, and then this will kind of do the same, but obviously over here it's going to return the pair

171
00:20:53,733 --> 00:21:01,125
所以就是xpos和ypos，顺便说一句，这件事最酷的地方是，很明显，对于cpp17
so xpos ypos, and the really cool thing about this by the way is that obviously with kind of cpp17

172
00:21:01,125 --> 00:21:09,529
如果正在用cpp17，我想我们正在用，可以快速检查，语言，就是cpp17，实际可以做什么
if you're using cpp17, which I think we are, we can check quickly where is this language cpp17, what you can actually do

173
00:21:09,766 --> 00:21:16,900
我很快就会告诉你们，如果得到这样的鼠标位置，最终可能会这样做，而不是做所有
as I'll show you here really quickly is if you get mouse position like this, which we might actually end up doing instead of doing all of this

174
00:21:17,733 --> 00:21:26,030
实际上可以这样做，对，auto[x, y]=GetMousePositionImpl()，然后我们可以像那样返回x
you can actually do something like this, right, auto x y equals getMousePosition, and then we can just return x like that

175
00:21:27,000 --> 00:21:33,566
好了，之所以这样做，是因为可以使用auto，基本上可以命名这两个被返回的浮点数
okay, the reason this works is because you can basically auto will you can basically name these two floats that are being returned

176
00:21:33,566 --> 00:21:38,800
真的很酷，而且它肯定会让返回pair更方便
which is really really cool, and it definitely makes two poles and pairs a lot more convenient

177
00:21:38,800 --> 00:21:46,261
因为你们基本上可以知道这个名字，不管你们想要什么，而不是必须使用std::get<0>
because you basically can you know name this whatever you want instead of actually you know having to do std::get<0>

178
00:21:47,625 --> 00:21:54,275
你们知道这是我的变量名v，就像你们知道的那样，因为它就是那样的
you know this is my variable name v like that to get like you know cause that, that's what it would have been like

179
00:21:54,466 --> 00:22:01,682
那是在cpp14或以下的版本必须做的，但在cpp17，你们就可以这样做，真的很酷
that's what you have to do in cpp14 or below, but in cpp17, you can just do this, which is really cool

180
00:22:02,966 --> 00:22:10,200
好了，就是那样，我们不需要做任何事情，我们也会在这里做同样的事情
all right, so that is that, and we don't have to cast to anything, and we'll do the same for here as well

181
00:22:11,300 --> 00:22:17,625
很酷的东西，很高兴我们添加了那个，基本上就那样，对吧，在Input.h中做了所有操作
so pretty cool stuff, glad we added that, that's basically it, right, we've done absolutely everything in our input class

182
00:22:17,625 --> 00:22:25,500
剩下的另一件事实际上是创建这个Input对象，对吧，所以实际上需要在代码中的某个地方
the other thing that remains is actually creating this Input thing, right, so we need to actually somewhere in our code

183
00:22:25,500 --> 00:22:33,950
我们需要实际创建这个实例，当然，因为它实际上必须是Windows，就像Windows实例一样
we need to actually create this instance, and of course since this actually has to be windows like the windows instance

184
00:22:33,950 --> 00:22:37,175
我们必须在WindowsInput中创建它，不必这样做，但我们将在这里这样做
we have to create it inside WindowsInput, well we don't have to, but we're going to do it here

185
00:22:37,650 --> 00:22:46,025
那么就是Input::s_Instance = nullptr，但我们将在这里得到它
so Input s_Instance is going to equal nullptr in this case, but we're gonna just have it here

186
00:22:46,699 --> 00:22:56,325
抱歉，这是个Input*，所以它等于nullptr，然后我们需要以某种方式初始化输入
and sorry this is a Input pointer, so it equals null pointer to here, and then we need to initialize our input at some in some way or another

187
00:22:56,666 --> 00:23:01,725
那就是我们实际要设置的，所以一个好的地方可能是WindowsWindow
and that's what we'll actually set this up, so a good place to do this would probably be WindowsWindow

188
00:23:02,666 --> 00:23:10,400
然后我们真正需要做的就是在这里设置它，所以这个Init函数就是一个很好的位置
and then all we really need to do is actually set it up here, so this Init function would for example be a really good place to do that

189
00:23:10,700 --> 00:23:16,650
然而，由于Input完全是静态的，所以它没有，只是数据，对吧，它只是函数集合中的数据
however again, because Input is completely static, it has no it's just data, right, it's just data in a collection of functions

190
00:23:16,650 --> 00:23:20,475
它不进行初始化，不像它有一个依赖于任何东西的构造函数
it does no Initialization, it's not like it has a constructor that relies on anything

191
00:23:20,825 --> 00:23:26,675
所以我们实际上可以做的就是在那静态块中将它设置为等于new WindowsInput()
so what we can actually do here is just set it equal to the new WindowsInput right here in that static block

192
00:23:27,066 --> 00:23:33,775
就是那样，现在我们有了整个WindowsInput，它实际上会静态初始化
and that's it, right now we have this whole WindowsInput thing, which actually will statically initialize this

193
00:23:34,200 --> 00:23:39,600
因此，如果我们想在代码中看到这个，可能需要一个Application.h或抱歉Application.cpp
so if we want to see this in our code, maybe an Application.h or sorry Application.cpp

194
00:23:39,900 --> 00:23:45,125
我们要真正使用它所需要做的就是包含Input.h
all we need to do to actually use this is I will include Input.h 

195
00:23:45,375 --> 00:23:55,350
然后在这里，也许在运行循环或类似的地方，执行HZ_CORE_TRACE，把这个小东西放进去
and then over here, maybe in the run loop or something like that, I'm just going to do HZ_CORE_TRACE, we'll put this little thing in

196
00:23:55,350 --> 00:24:13,375
也许只需要\{0\}, \{1\}，然后会输入，就是auto [x, y] = Input::GetMousePosition()，就是x和y
maybe we'll just do 0 0 1, and then we'll put in, I'll do auto x and y I did before Input::GetMousePosition, x y

197
00:24:14,425 --> 00:24:18,225
好了，让我们运行这个，看看会发生什么，应该看到这
okay, let's run this see what happens, okay, so we should see over here

198
00:24:18,225 --> 00:24:21,075
可以看到我们得到了Hazel和鼠标位置，对吧
that you can see we have Hazel and in the mouse position, right

199
00:24:21,600 --> 00:24:26,150
它也会打印所有的事件，所以有点难看，但这里有Hazel和鼠标位置
it's also printing all the events, so it's a bit hard to see, but there you have Hazel and in the mouse position

200
00:24:26,266 --> 00:24:30,650
好了，继续，正在打印，所以我们可以肯定地看到，那实际是有效的
okay, there you go, being printed, so we can definitely see that that is in fact working

201
00:24:31,025 --> 00:24:32,666
无论如何，希望你们喜欢这期视频
anyway, I hope you guys enjoyed this video

202
00:24:32,666 --> 00:24:34,275
如果你们喜欢的话，就为它点赞吧
if you did, you can hit that like button

203
00:24:34,275 --> 00:24:39,266
非常感谢通过patreon.com/thecherno让这期视频成为可能的朋友
huge thank you to all the patreons on patreon.com/thecherno that help make this video possible

204
00:24:39,266 --> 00:24:44,766
没有你们，就没有它。如果你们支持这期视频，就会更早看到下期，这样就能马上得到它
it wouldn't be here without you, if you want to support that, you guys get the next video early, so like you'll get it straight away

205
00:24:44,766 --> 00:24:48,850
基本上，它将发布在YouTube上，以及Hazel开发分支
basically it's gonna use this public on YouTube, as well as the Hazel development branch

206
00:24:48,850 --> 00:24:51,158
在那里我已经做了所有这些，而且做得更多
where I've already done all this stuff and way way way more

207
00:24:51,366 --> 00:24:55,850
所以可以跳过去看看Hazel，因为它实际上是我在业余时间开发的
so you can kind of skip ahead and see Hazel, as it's actually being developed by me my spare time

208
00:24:57,366 --> 00:25:02,600
下次我们可能会实现我提到的那些按键代码和鼠标按钮代码，请随意使用
next time we'll probably implement those key codes and mouse button codes that I talked about, feel free to play around with this

209
00:25:02,866 --> 00:25:10,975
我只测试鼠标位置，但你们应该测试鼠标x y键和按键，确保它们正常运行
I only test to get mouse position, but you guys should test get mouse x y mouse buttons and key buttons as well and make sure that's working

210
00:25:10,975 --> 00:25:14,450
所以那就是给你们的一点家庭作业，如果没有，如果我做错了什么
so that's a little bit of homework for you guys, if not, if I did something wrong

211
00:25:14,450 --> 00:25:17,525
在Github上打开一个合并请求的那期视频会教你们如何做
open a pull requests on Github last video, we'll teach you how to do that

212
00:25:18,200 --> 00:25:23,050
然后我们以后会合并并修复它，希望你们喜欢这期视频，下次见，拜
and then we like all merge later and I'll fix it, hope you guys enjoyed this video, I'll see you next time, goodbye

