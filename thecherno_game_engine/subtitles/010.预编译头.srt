1
00:00:00,030 --> 00:00:03,425
嘿，你们好，我是TheCherno，欢迎回到我的游戏引擎系列
hey, what's up guys, my name is TheCherno, welcome back to my game engine series 

2
00:00:03,825 --> 00:00:09,250
那么上次我们提到这可能是个好主意，当Hazel还处于早期开发阶段
so last time we mentioned that it's probably a good idea, while Hazel is still kind of early on in development

3
00:00:09,425 --> 00:00:13,925
讨论预编译头文件，并实际开始使用预编译头文件
to actually talk about precompiled headers, and actually start using precompiled headers

4
00:00:13,925 --> 00:00:18,000
所以那就是我们今天要做的，如果你们还没看过上期视频，一定要去那儿看
so that's what we're going to do today, if you can't watch the previous episode, definitely watch it there 

5
00:00:18,000 --> 00:00:22,369
那就是我们在之前的视频中所计划的事件系统
that's what we actually set up that event system that we planned in the episode before that

6
00:00:23,200 --> 00:00:26,550
但今天我们要讲的是上周讲的预编译头文件
but yeah today's gonna be all about precompiled headers now I did last week

7
00:00:26,550 --> 00:00:31,075
制作的一个关于C++系列中预编译头文件的视频，所以一定要去看看
just make a video about precompiled headers in the C++ series, so check that out

8
00:00:31,625 --> 00:00:36,775
我这么做的原因显然是，预编译头文件不仅仅适用于我们正在构建的游戏引擎
the reason I did that is because obviously precompiled headers are more than just applicable through this game engine that we're building 

9
00:00:37,125 --> 00:00:41,650
并且我还想做一个更通用的视频，那只是关于它们的原理，以及我们为什么要使用它们
and I wanted to make a more generic the video, that's just about how they work and why we want to use them 

10
00:00:41,950 --> 00:00:45,575
所以如果你们不确定预编译头文件是什么，一定要看看那个视频
so definitely check out that video, if you're not sure what a precompiled header is

11
00:00:45,800 --> 00:00:50,675
因为我不会在这儿花太多时间解释它，那大概是一个20多分钟的关于预编译头文件的视频
because I'm not gonna spend too much time explaining it here, that's like a 20 plus minute video about precompiled headers

12
00:00:50,675 --> 00:00:56,425
不管怎样，所以在这个视频中我们不会讨论它们是什么，只会直接实现它们
anyway, so instead of really talking about what they are in this video, we're just gonna go ahead and implement them

13
00:00:57,245 --> 00:00:59,300
所以如果你们还不知道的话，请先看那个视频
so yeah watch that video first, if you haven't already

14
00:00:59,300 --> 00:01:01,625
然后我们跳到实现预编译头文件
and then let's just jump into implementing precompiled headers

15
00:01:02,086 --> 00:01:07,525
那么看看这里所有的Hazel/src，显然有一堆东西是我们最后要用到的
so looking at all of our Hazel/src here, there's obviously a bunch of stuff that we're going to end up using 

16
00:01:07,750 --> 00:01:13,900
这需要使用很多标准库的东西，比如，我们在这里提前包含了memory
that requires the use of many kind of standard library things, like for example we're including memory here in advance

17
00:01:14,325 --> 00:01:16,225
你们知道的，包含string，包含functional，所有这些
you know, including string, we're including functional

18
00:01:16,950 --> 00:01:22,900
所有这些东西都可以在字符串流中，所有这些东西都可以移到一个预编译头文件中
all the thing all of these things can be in a string stream, all these things can be moved into a precompiled header 

19
00:01:23,675 --> 00:01:26,175
并且当然，这个Hazel项目目前还很年轻
and of course this Hazel project is quite young at the moment

20
00:01:26,175 --> 00:01:29,525
我们只使用了其他数据结构，比如向量
we'd only been using like other data structures, like vector for example

21
00:01:29,525 --> 00:01:34,250
所以现在创建那个预编译头文件是一个很好的主意
um so it's a really good idea to actually create that precompiled header now

22
00:01:34,250 --> 00:01:39,300
因为我们没有太多的源文件，这意味着我们实际上不需要花太多的时间来编辑这些
because we don't have too many source files, which means we don't need to spend too much time actually editing things

23
00:01:40,175 --> 00:01:45,250
这很好，好了，那么我们要做的第一件事是在src下
which is quite nice, ok, so the first thing we're going to do is under src

24
00:01:45,450 --> 00:01:50,975
实际上，我要创建一个新文件，创建一个头文件和cpp文件
I'm actually going to make a new file, which I'm gonna make a header file and a cpp file

25
00:01:51,275 --> 00:02:01,925
我把它叫做hzpch，所以是hzpch.h，然后还需要创建一个c++文件hzpch.cpp
and I'm gonna call it hzpch, so hzpch.h add, and then also we need to make a C++ file called hzpch.cpp

26
00:02:02,575 --> 00:02:08,025
这将包含我们的hzpch.h文件，这是VS所需要的
this will include our hzpch.h file, this is needed for visual studio

27
00:02:08,025 --> 00:02:12,250
因为VS预编译头文件需要一个包含预编译头文件的源文件
because visual studio precompiled headers require a source file, which includes the precompiled header

28
00:02:12,650 --> 00:02:18,025
而其他的编译器，如gcc或clang就不需要，而在这里，这将是一个预编译头
whereas other compilers like clang or gcc do not, and then over here, this is gonna be a precompiled header

29
00:02:18,150 --> 00:02:22,525
那么我想做的第一件事是如果我们在Windows中
so the first thing I want to do is if we're actually in Windows

30
00:02:23,875 --> 00:02:30,100
所以如果HZ_PLATFORM_WINDOWS存在的话，我将包含Windows.h
so if HZ_PLATFORM_WINDOWS, I'm actually going to include Windows.h

31
00:02:30,100 --> 00:02:34,450
因为这肯定是需要的，而那正是我们想要的
because that's definitely going to be needed, and that's just something that we want to have available to us

32
00:02:34,450 --> 00:02:40,900
如果Windows被定义了，这是属于预编译头文件的东西
if we're kind of, if Windows is actually defined, this is something that does belong in a precompiled header

33
00:02:40,900 --> 00:02:48,825
但显然不是针对所有平台，我们可以为每个平台单独创建一个预编译头文件
however obviously not for all platforms, we could make, we could make a precompiled header be separate for each platform

34
00:02:48,825 --> 00:02:51,425
不打算费这个劲，我不认为这是百分百必要的
I'm not gonna bother with that, I don't think that's 100% necessary

35
00:02:51,750 --> 00:03:01,525
但也许特定于windows或其他特定于平台的头文件可以通过这种ifdef包含在这个pch中
but maybe Window specific or other platform specific headers can actually be included in this pch with this kind of ifdef 

36
00:03:01,825 --> 00:03:09,350
然后在这里，我们会放一些通用的东西，你们知道的，比如iostream，memory之类的
and then over here, we'll put common stuff, so stuff like iostream, stuff like memory, you know

37
00:03:09,350 --> 00:03:14,900
utility，algorithm，我不会放太多东西，这里是functional
utility, algorithm, I'm not gonna put too much stuff, here functional what else did we have

38
00:03:15,850 --> 00:03:25,325
然后你们知道的，还有数据结构，比如string，vector，unordered_map，unordered_set
and then you know, data structures like string vector, probably unordered_map, unordered_set 

39
00:03:25,325 --> 00:03:29,400
我不想在这里浪费太多时间，我们会在需要的时候添加一些东西
I don't want to waste too much time here, we'll kind of add stuff to this as we need them of course

40
00:03:29,400 --> 00:03:34,306
但这可能是一个很好的集合，我想我们也用了sstream
but this is probably a good set, I think we also used sstream as well

41
00:03:35,450 --> 00:03:39,500
像这样和string放在一起可能更有意义一些
probably makes more sense for this to be with string like this 

42
00:03:40,000 --> 00:03:44,850
但不管怎样，那大概是一个关于我们真正需要什么的好主意
but anyway, that's probably a Chad generally a good idea of what we actually need 

43
00:03:44,850 --> 00:03:48,200
如果我们看一下这个，它是一个string和functional，我也会从这里开始移除它们
if we go through this, it's a string functional, I'll start removing them as well from here

44
00:03:48,200 --> 00:03:56,850
因为我们不需要它们，以及sstream，我们可以只在头文件本身中包含预编译头文件
because we don't need them, sstream, sstream, we can just include the precompiled header in header files themselves

45
00:03:56,850 --> 00:04:06,575
顺便说一下，不只是在cpp文件里，过一遍，酷，酷，酷，这儿还有memory
by the way, doesn't just need to be in a cpp file, going through this, cool cool cool cool cool, memory we have

46
00:04:07,475 --> 00:04:12,125
是的，就是那样，酷，好吧，那是我们的预编译头，它有我们需要的一切
yeah that's about it, cool, okay, so there's our precompiled header, it's got everything we need now 

47
00:04:12,400 --> 00:04:18,500
现在让我们把它添加到premake，所以在Hazel中，我要打开那个premake文件
now let's go ahead and add it to premake, so in Hazel, I'm going to just kind of open that premake file

48
00:04:18,500 --> 00:04:23,025
我们要讨论的是，我们需要添加到项目中的所有内容
yeah yeah we're gonna talk about, all we actually need to add to our projects

49
00:04:23,750 --> 00:04:26,650
或者是Hazel项目来使用pch
or specifically the Hazel project to actually use pch

50
00:04:26,900 --> 00:04:30,225
那么我们首先要指定的是pch头文件
so the first thing we need to specify is which header file is our pch

51
00:04:30,450 --> 00:04:38,175
所以我们要写pchheader，然后是头文件的名字，像那样的hzpch.h
so we're gonna write pchheader and then the name of the header file, which is a hzpch.h like that

52
00:04:38,175 --> 00:04:43,425
那就意味着使用hzpch.h文件，对吧，然后是为了VS
that means use the hzpch.h file, right, and then for visual studio

53
00:04:43,425 --> 00:04:49,125
因为它也需要创建一个pch文件，实际上，我们需要输入pchsource
because it actually needs to create a pch file as well, we need to actually type pchsource

54
00:04:49,125 --> 00:04:52,350
在我们不需要这个的平台上，这个可以被移除
now this can be excluded on platforms in which we don't need this

55
00:04:52,350 --> 00:04:56,075
或者更确切地说，对于我们生成的项目的编译器我们实际上不需要这个
or rather for compilers for projects that we generate well, we actually don't need this

56
00:04:56,075 --> 00:04:57,550
但对于VS，我们需要
but for visual studio, we do um

57
00:04:58,200 --> 00:05:01,475
所以比如你们知道的，我们不需要把它放在system:windows过滤器下
so we don't have to put this under like you know filter system:windows or anything

58
00:05:01,475 --> 00:05:06,384
在其他平台上它就会被忽略，酷
it will just be ignored on other kind of platforms, cool

59
00:05:06,384 --> 00:05:11,696
那么然后在这儿，我们需要指定完整的路径，那么就是Hazel/src/hzpch.cpp
so and then here, we actually need to specify the full path, so Hazel src and then hzpch.cpp

60
00:05:11,900 --> 00:05:15,300
好了，那就相当于我们直接去
okay, so that is kind of the equivalent of us going ahead

61
00:05:15,300 --> 00:05:20,775
然后说，你们知道的，在VS中，请创建我的预编译头文件
and saying you know, behind visual studio, please create my precompiled header file

62
00:05:21,575 --> 00:05:26,075
然后这就相当于进入我们的项目，并且就像
and then this is the equivalent of kind of just going into our project, and being like

63
00:05:26,475 --> 00:05:35,800
嘿，我要用pch，它将是hzpch.h，好了，所以那就是所有的内容
hey you know, I'm going to use pch and it's going to be hzpch.h, okay, so that's what that is all about

64
00:05:35,800 --> 00:05:40,675
这里不要保存，好了，酷，所以那就是我们要写的
and let's not save our changes here, okay, cool, so that's all we need to write again

65
00:05:40,675 --> 00:05:45,150
我刚刚为Hazel做了这个，如果你们最终有大量的Sandbox应用
I've just done this for Hazel, if you kind of end up with substantial Sandbox application

66
00:05:45,150 --> 00:05:47,775
你们也可以在Sandbox中这样做，但现在，那就是我们所需要的
you can do that for Sandbox as well, but for now, that's all we need

67
00:05:48,150 --> 00:05:53,425
那么让我们重新运行GenerateProjects文件，好了，一切都成功完成了
so let's rerun our GenerateProjects file, there we go, it's done everything successfully 

68
00:05:53,750 --> 00:05:59,554
如果我现在重新加载，我们应该可以右击这里，看到这里被标记为create
if I reload everything now, we should be able to right click here, and see that this is now marked as create

69
00:05:59,850 --> 00:06:06,300
并且在我们的项目设置中，这不是常用的，hzpch.h是要使用的预编译头文件
and that in our kind of project settings, this is not as used, and hzpch.h is the precompiled header to use

70
00:06:06,725 --> 00:06:11,500
酷，那么现在让我们清理构建一次，当然我们会得到一些错误
cool, so now let's do a clean build of everything, and of course we get several errors 

71
00:06:11,500 --> 00:06:16,900
因为我们需要确保hzpch.h文件是第一个被包含的文件
because we need to make sure that that hzpch.h file is the first thing 

72
00:06:16,900 --> 00:06:23,625
它被包含在每个cpp文件中，所以在最上面，我将包含hzpch.h
that's included in every single cpp file, so at the very top, I'm going to include hzpch.h

73
00:06:23,750 --> 00:06:27,425
好了，并且每个文件都要这样做
okay, and this will be done for every single file

74
00:06:27,425 --> 00:06:34,775
现在我认为src实际上在我们的编译器包含路径中，是的，这应该会让它变得简单
now I think src is actually in our in our compiler include paths, yes, it is that should make it easy

75
00:06:34,775 --> 00:06:41,950
只需要包含那个，就那样，那么看看Application和Log.cpp
just need to include that, and that's it, so Application and then Log.cpp

76
00:06:41,950 --> 00:06:46,300
每一个cpp文件都要看看，虽然我们只有两个
every single cpp file, we've only got like two though 

77
00:06:46,750 --> 00:06:51,925
所以那就是为什么我想在这个项目开始发展之前尽快完成它
so that's that's why I wanted to get this done as quickly as possible before this project starts growing a lot

78
00:06:52,325 --> 00:06:57,475
所以如果我们再构建一次，你们可以看到我们没有得到错误，构建成功
so if we build this again, you can see that we get no errors it, built successfully

79
00:06:57,825 --> 00:07:05,300
并且它花了5秒半，顺便说一下，作为一个例子，那是一个带有预编译头文件的清理构建
and it took five and a half seconds, by the way, as an example, that that's a clean build with precompiled headers

80
00:07:05,300 --> 00:07:09,950
或者只是为了好玩，让我们来试试清理构建，看看Hazel需要多长时间来构建
or otherwise just do a clean build for fun, and see how long Hazel takes to build

81
00:07:11,125 --> 00:07:21,000
所以使用预编译头文件，一个清理构建需要6秒，好了，而没有预编译头文件呢
so with precompiled headers, a clean build takes six seconds, okay, and without precompiled headers

82
00:07:21,350 --> 00:07:29,550
那么我把预编译头设置为不使用，然后右键单击清理，右键单击构建
so I'll just set precompiled headers to not using, and then I'll right-click clean, right-click build 

83
00:07:29,750 --> 00:07:32,920
你们可以看到，花了7.6秒，所以稍微长一点，也不是很长
you can see, take seven point six second, so a little bit longer, not that much longer

84
00:07:32,920 --> 00:07:37,425
然而，大多数构建时间的提升都来自于对单个源文件的编辑
however most the kind of build time improvements are gonna come from just editing individual source files 

85
00:07:37,425 --> 00:07:43,225
所以如果只是，我不知道，可以添加一个空格或其他东西，然后再次点击构建
so if I just kind of, I don't know, I could just add a space or something, and then hit build again

86
00:07:44,225 --> 00:07:49,100
你们可以看到，就这个Application.cpp文件需要三秒钟才能重新编译
this one Application.cpp file, you can see, that it took three seconds to recompile 

87
00:07:50,425 --> 00:07:58,775
让我们再构建一次，只是为了有一个更好的更可靠的计时，大约是3.3秒
let's just do that again, just to have a better kind of more reliable timing, it's about three, three point three seconds

88
00:07:59,575 --> 00:08:07,775
然后我会切换到使用预编译头文件，我会用这个新东西来构建所有东西
and then I will switch this to use precompiled headers, I'll just build everything with this new kind of thing

89
00:08:09,100 --> 00:08:18,850
完成后，我去除了空格，点击构建，你们可以看到，它快了很多
and then once that is done, I'll have my space back, hit build, and you can see, it's quite a bit faster 

90
00:08:19,050 --> 00:08:28,200
然后如果我移走了空格，重新开始构建，好了，速度一直在加快
and then if I remove my space, and do my build again, there we go, so consistently faster

91
00:08:28,200 --> 00:08:34,650
现在我们有了预编译头文件，随着项目规模的增长，它只会变得越来越快
now that we have precompiled headers, and that will only kind of get faster and faster as our project grows in size 

92
00:08:34,900 --> 00:08:38,325
好了，所以就是那样，你们可以看到，集成预编译头文件是多么容易
okay, so that's it, you can see, how easy it is to actually integrate precompiled headers

93
00:08:38,600 --> 00:08:45,825
这真的一点也不烦人，因为不需要遍历我们拥有的100个cpp文件然后把它添加进去，对吧
it's really not annoying at all, because we didn't have to go through the 100 cpp files we had and then add it in, right

94
00:08:45,825 --> 00:08:48,250
如果我们在这个系列后面做这个，会是什么情况呢
which would have been the case, if we had done this later on in the series

95
00:08:48,625 --> 00:08:51,700
所以我很高兴我们能尽快解决这个问题
so I'm really happy to get us out of the way as quickly as possible really

96
00:08:51,700 --> 00:08:55,575
这应该是任何大型项目的初始项目设置的一部分
this should be part of your initial project set up for any kind of large project 

97
00:08:56,275 --> 00:09:00,125
如果你们决定使用预编译头文件，那么好了，我们现在有了
if you've decided to use precompiled headers, so there we go, we have that now

98
00:09:00,300 --> 00:09:05,450
并且你们可以看到，做这种事情有多容易，只需要pchheader
and you can see, how how easy it is to actually do this kind of stuff and pretty much, just pchheader

99
00:09:05,925 --> 00:09:11,100
它是什么，我忘了它叫什么了，pchsource和pchheader
and what was it, actually I just forgot what it's called, yeah pchheader in pchsource

100
00:09:11,100 --> 00:09:13,550
这就是你们所需要的，还有pchsource
and that's all you need, and the pchsource again

101
00:09:13,550 --> 00:09:19,175
只有当你们使用MSVC作为编译器时，它才需要，好了
and then it only needed, if you're using MSVC as your compiler, okay

102
00:09:19,175 --> 00:09:21,675
希望你们喜欢这个视频，如果喜欢的话，就为它点赞吧
hope you guys enjoy this video, if you do, you know the like button 

103
00:09:21,675 --> 00:09:24,625
你们也可以通过访问patreon.com/thecherno来支持这个系列
you can also help support this series but got a patreon.com/thecherno

104
00:09:24,625 --> 00:09:28,000
像往常一样，非常感谢所有让这个系列成为可能的赞助人
huge thank you, as always, to all the patrons that make this series possible 

105
00:09:28,100 --> 00:09:35,700
下一期已经为你们准备好了，而且你们可以访问的开发仓库已经有了所有这些东西
next episode is already up for you guys, and also the development repository that you get access to already has all this stuff

106
00:09:35,700 --> 00:09:39,550
显然那就是我在视频之前实现的所有东西
obviously written that's where I implement everything way ahead of the videos

107
00:09:39,950 --> 00:09:43,175
所以如果你们对此感兴趣的话，肯定有助于支持这个系列，去看看吧
so if you're interested in that, definitely helps support the series, and check that out

108
00:09:43,875 --> 00:09:47,850
下次再见，我想我们终于可以开始讨论窗口了
I will see you guys next time, I think we're gonna finally be able to start talking about windows

109
00:09:47,975 --> 00:09:50,490
就像图层和应用一样
and like layers and application kind of how that

110
00:09:50,490 --> 00:09:53,910
它们是如何相互交织的应用程序运行循环等等
in how that intertwines and just application run loop and all that stuff

111
00:09:53,910 --> 00:09:58,325
我想那将是我们接下来关注的内容，所以我们终于说到重点了
I think that's going to be the stuff that we focus on next, so finally we're getting to the point 

112
00:09:58,325 --> 00:10:02,819
我们可能在屏幕上有一个窗口，那将是令人兴奋的
where we might be able to have a window on something on the screen, that's gonna be exciting 

113
00:10:02,819 --> 00:10:04,900
那期视频再见，拜
I'll see you guys in that video, goodbye

